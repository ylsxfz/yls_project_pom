<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.yls</groupId>
        <artifactId>pom</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.authority</groupId>
    <artifactId>manager</artifactId>
    <name>manager</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <!--依赖model-->
        <core.versoin>0.0.1-SNAPSHOT</core.versoin>
        <common.versoin>0.0.1-SNAPSHOT</common.versoin>
        <statics.statics>0.0.1-SNAPSHOT</statics.statics>
        <!--jdk-->
        <java.version>1.8</java.version>
        <!--elasticsearch-->
        <elasticsearch.version>6.4.0</elasticsearch.version>
        <!-- logstash -->
        <logstash.version>6.4</logstash.version>

        <!--数据库druid监控-->
        <druid.version>1.1.9</druid.version>
        <!--工具包-->
        <commons.lang.version>2.6</commons.lang.version>
        <!--定时器-->
        <quartz.version>2.2.3</quartz.version>
        <!--spring监控项目-->
        <spring.admin.version>2.0.5</spring.admin.version>
        <!--jwt安全校验-->
        <jwt.version>0.9.1</jwt.version>
        <!--shiro安全校验-->
        <shiro.version>2.0.0</shiro.version>
        <!--验证码-->
        <kaptcha.version>0.0.9</kaptcha.version>
        <!--sockjs-->
        <sockjs.version>1.1.2</sockjs.version>
        <!--websocket-->
        <websocket.version>2.3.3</websocket.version>
        <!--webservices-->
        <webservices.version>3.2.5</webservices.version>

        <!--swagger2接口文档-->
        <swagger2.version>2.9.2</swagger2.version>
        <!--swagger2markup-->
        <swagger2markup.version>1.3.1</swagger2markup.version>
        <asciidoctor.versioin>1.5.6</asciidoctor.versioin>
        <!-- knife4j -->
        <knife4j.version>2.0.5</knife4j.version>
        <swagger-annotations.version>1.5.22</swagger-annotations.version>

        <!--poi-->
        <poi.version>4.0.1</poi.version>
        <!--pagehelper-->
        <pagehelper.version>1.2.5</pagehelper.version>

        <!--json工具包-->
        <fastjson.version>1.2.70</fastjson.version>
        <jackson.version>2.13.4.1</jackson.version>

        <!-- mybatis -->
        <mybatis.version>1.3.5</mybatis.version>
        <!-- mybatis-plus.version -->
        <mybatis-plus.version>3.1.0</mybatis-plus.version>
        <!-- tk.mybatis.version -->
        <tk.mybatis.version>2.0.4</tk.mybatis.version>
    </properties>

    <dependencies>
        <!--加入其它依赖的模块-->
        <dependency>
            <groupId>com.yls</groupId>
            <artifactId>core</artifactId>
            <version>${core.versoin}</version>
        </dependency>
        <dependency>
            <groupId>com.yls</groupId>
            <artifactId>common</artifactId>
            <version>${common.versoin}</version>
        </dependency>
        <dependency>
            <groupId>com.yls</groupId>
            <artifactId>statics</artifactId>
            <version>${statics.statics}</version>
            <!--因为static是war打包方式，所以必须声明，不然默认是jar打包方式-->
            <type>war</type>
        </dependency>
        <!-- jpa -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>spring-boot-starter-logging</artifactId>
                    <groupId>org.springframework.boot</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--MyBatis-->
        <!--<dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis.version}</version>
        </dependency>-->
        <!-- mybatis-plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>${mybatis-plus.version}</version>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-extension</artifactId>
            <version>${mybatis-plus.version}</version>
        </dependency>
        <!--        <dependency>-->
        <!--            <groupId>tk.mybatis</groupId>-->
        <!--            <artifactId>mapper-spring-boot-starter</artifactId>-->
        <!--            <version>${tk.mybatis.version}</version>-->
        <!--        </dependency>-->
        <!-- thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!-- web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- restful风格 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>
        <!--devtools热部署-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
            <scope>true</scope>
        </dependency>
        <!-- 批处理 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-batch</artifactId>
        </dependency>
        <!-- 数据校验 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!--log4j2日志-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
        <!-- Mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!-- alibaba的druid数据库连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>${druid.version}</version>
        </dependency>
        <!--工具包-->
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>${commons.lang.version}</version>
        </dependency>
        <!-- spring 定时器需要  -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>
        <!--quartz定时器-->
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <version>${quartz.version}</version>
        </dependency>
        <!-- retry重试机制 -->
        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
        </dependency>
        <!--应用监控-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- 以json格式输出信息 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-hateoas</artifactId>
        </dependency>
        <!--json工具包-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>
        <!-- jackson json 优化缓存对象序列化 -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <!-- aop切面编程 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!-- webservices -->
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-spring-boot-starter-jaxws</artifactId>
            <version>${webservices.version}</version>
        </dependency>
        <!--spring boot webSocket 的依赖包 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>
        <!-- 添加redis依赖  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- lettuce pool 缓存连接池 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
        <!-- springboot admin client -->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
            <version>${spring.admin.version}</version>
        </dependency>
        <!-- 开启安全认证 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <!--jwt(Token令牌生成方案)-->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>${jwt.version}</version>
        </dependency>
        <!--shiro安全框架-->
        <dependency>
            <groupId>com.github.theborakompanioni</groupId>
            <artifactId>thymeleaf-extras-shiro</artifactId>
            <version>${shiro.version}</version>
        </dependency>

        <!--kaptcha验证码-->
        <dependency>
            <groupId>com.github.axet</groupId>
            <artifactId>kaptcha</artifactId>
            <version>${kaptcha.version}</version>
        </dependency>

        <!--前端测试的包-->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>webjars-locator-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>sockjs-client</artifactId>
            <version>${sockjs.version}</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>stomp-websocket</artifactId>
            <version>${websocket.version}</version>
        </dependency>

        <!--集成swagger文档-->
        <!--        <dependency>-->
        <!--            <groupId>io.springfox</groupId>-->
        <!--            <artifactId>springfox-swagger2</artifactId>-->
        <!--            <version>${swagger2.version}</version>-->
        <!--        </dependency>-->
        <!--集成swagger文档-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger2.version}</version>
        </dependency>
        <!-- Knife4j -->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-spring-boot-starter</artifactId>
            <version>${knife4j.version}</version>
        </dependency>
        <!--AbstractSerializableParameter : Illegal DefaultValue null for parameter type integer解决方案-->
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>${swagger-annotations.version}</version>
        </dependency>
        <!--AbstractSerializableParameter : Illegal DefaultValue null for parameter type integer解决方案-->
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-models</artifactId>
            <version>${swagger-annotations.version}</version>
        </dependency>

        <!-- poi -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>${poi.version}</version>
        </dependency>
        <!-- pagehelper -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>${pagehelper.version}</version>
        </dependency>


        <!--生成文档-->
        <dependency>
            <groupId>io.github.swagger2markup</groupId>
            <artifactId>swagger2markup</artifactId>
            <version>${swagger2markup.version}</version>
        </dependency>
        <!-- es依赖 -->
        <dependency>
            <groupId>org.elasticsearch.client</groupId>
            <artifactId>elasticsearch-rest-high-level-client</artifactId>
            <version>${elasticsearch.version}</version>
        </dependency>

        <!-- logback -->
<!--        <dependency>-->
<!--            <groupId>ch.qos.logback</groupId>-->
<!--            <artifactId>logback-classic</artifactId>-->
<!--        </dependency>-->

        <!--集成logstash-->
<!--        <dependency>-->
<!--            <groupId>net.logstash.logback</groupId>-->
<!--            <artifactId>logstash-logback-encoder</artifactId>-->
<!--            <version>${logstash.version}</version>-->
<!--        </dependency>-->

        <!-- jxl 操作excel -->
        <!--        <dependency>-->
        <!--            <groupId>org.jxls</groupId>-->
        <!--            <artifactId>jxls-jexcel</artifactId>-->
        <!--            <version>1.0.6</version>-->
        <!--        </dependency>-->

        <!--consul-->
        <!--<dependency>
             <groupId>org.springframework.cloud</groupId>
             <artifactId>spring-cloud-starter-consul-discovery</artifactId>
         </dependency>-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <!--srping cloud-->
    <!--<dependencyManagement>
         <dependencies>
             <dependency>
                 <groupId>org.springframework.cloud</groupId>
                 <artifactId>spring-cloud-dependencies</artifactId>
                 <version>Finchley.RELEASE</version>
                 <type>pom</type>
                 <scope>import</scope>
             </dependency>
         </dependencies>
     </dependencyManagement>-->

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup-maven-plugin</artifactId>
                <version>${swagger2markup.version}</version>
                <configuration>
                    <swaggerInput>http://localhost:8443/v2/api-docs</swaggerInput><!---swagger-api-json路径-->
                    <outputDir>src/main/resources/docs/asciidoc</outputDir><!---生成路径-->
                    <config>
                        <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage><!--生成格式-->
                    </config>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>${asciidoctor.versioin}</version>
                <configuration>
                    <!--asciidoc文件目录-->
                    <sourceDirectory>src/main/resources/docs</sourceDirectory>
                    <!---生成html的路径-->
                    <outputDirectory>src/main/resources/html</outputDirectory>
                    <backend>html</backend>
                    <sourceHighlighter>coderay</sourceHighlighter>
                    <attributes>
                        <!--导航栏在左-->
                        <toc>left</toc>
                        <!--显示层级数-->
                        <toclevels>3</toclevels>
                        <!--自动打数字序号-->
                        <sectnums>true</sectnums>
                    </attributes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
